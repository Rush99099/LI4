@page "/catalogo"
@using BMW.Data.Data
@using BMW.Data.Models
@using BMW.Data
@inject UserState UserState
@inject NavigationManager NavigationManager

<PageTitle>Catálogo</PageTitle>

<TableLayout 
    UserName="@UserState.UserName"
    UserRole="Cliente"
    Button1Text="Encomendas"
    Button1Href="/encomendas"
    Button1Icon="📦"
    Button2Text="Catálogo"
    Button2Href="/catalogo"
    Button2Icon="🛒"
    Title="Catálogo de Veículos BMW">

    <div class="catalog-container">
        @if (veiculos == null || !veiculos.Any())
        {
            <p>Não há veículos disponíveis no momento.</p>
        }
        else
        {
            @foreach (var veiculo in veiculos)
            {
                <div class="catalog-item">
                    <h3 class="car-name">@veiculo.Modelo</h3>
                    <p><strong>Preço: </strong>@string.Format("{0:C}", veiculo.PrecoBase)</p>
                    <button class="btn-encomendar" @onclick="() => Encomendar(veiculo.Id)">Encomendar</button>
                </div>
            }
        }
    </div>
</TableLayout>

@code {
    private List<VeiculoCatalogo> veiculos = new();

    protected override void OnInitialized()
    {
        try
        {
            // Obter veículos do BMWFacade
            veiculos = BMWFacade.GetInstance().GetCatalogo()
                                .Select(v => new VeiculoCatalogo
                                {
                                    Id = v.Id,
                                    Modelo = v.Modelo,
                                    PrecoBase = v.PrecoBase
                                })
                                .ToList();
            Console.WriteLine("Catálogo carregado com sucesso.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar o catálogo de veículos: {ex.Message}");
        }
    }

    private void Encomendar(int veiculoId)
    {
        try
        {
            // Verificar se o utilizador está autenticado
            var clienteId = UserState.UserId;
            if (clienteId <= 0)
            {
                Console.WriteLine("Erro: Utilizador não autenticado.");
                return;
            }

            // Usar o método RegistarEncomenda do BMWFacade
            BMWFacade.GetInstance().RegistarEncomenda(clienteId, veiculoId, "Encomenda realizada pelo catálogo.");
            Console.WriteLine($"Encomenda realizada com sucesso! Veículo ID: {veiculoId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao realizar a encomenda para o veículo ID {veiculoId}: {ex.Message}");
        }
    }

    public class VeiculoCatalogo
    {
        public int Id { get; set; }
        public string Modelo { get; set; } = string.Empty;
        public decimal PrecoBase { get; set; }
    }
}

<style>
    .catalog-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        padding: 20px;
    }

    .catalog-item {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
        width: 250px;
    }

    .car-name {
        color: #333333;
        margin: 10px 0;
        font-size: 1.2rem;
    }

    .catalog-item p {
        margin: 5px 0;
        color: #555555;
    }

    .btn-encomendar {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-encomendar:hover {
        background-color: #0056b3;
    }
</style>
