@page "/encomendas/acompanhar/{id:int}"
@using BMW.Data.Data
@using BMW.Data
@using BMW.Data.Models
@inject UserState UserState
@inject NavigationManager NavigationManager

<PageTitle>Acompanhar Encomenda</PageTitle>

<TableLayout 
    UserName="@UserState.UserName"
    UserRole="Cliente"
    Button1Text="Encomendas"
    Button1Href="/encomendas"
    Button1Icon="üì¶"
    Button2Text="Cat√°logo"
    Button2Href="/catalogo"
    Button2Icon="üõí"
    Title="Acompanhar Encomenda">

    <div class="encomenda-container">
        <div class="encomenda-detalhes">
            <h3 class="encomenda-titulo">Encomenda #@Id</h3>
            <p><strong>Ve√≠culo:</strong> @Modelo</p>
            <p><strong>Data da Encomenda:</strong> @Data</p>
            <p><strong>Estado Atual:</strong> @Estado</p>
            <p><strong>Fase Atual:</strong> (@FaseAtual.Ordem/@TotalFases) - @FaseAtual.Descricao</p>
            <p><strong>Progresso da Montagem:</strong> @ProgressoPercentual%</p>
        </div>

        <div class="encomenda-progresso">
            <div class="progress-bar">
                @for (int i = 1; i <= TotalFases; i++)
                {
                    <span 
                        id="fase-@i"
                        class="progress-step @(i <= FaseAtual.Ordem ? "completed" : "")"
                        onclick="selectFase(@i)">
                    </span>
                }
            </div>
        </div>

        <div class="fase-imagem">
            <img id="faseImg" src="@FaseImagem" alt="Fase Atual - @FaseAtual.Descricao" />
            <p id="faseLegenda" class="fase-legenda">Fase @FaseAtual.Ordem - @FaseAtual.Descricao</p>
        </div>
    </div>
</TableLayout>

@code {
    [Parameter]
    public int Id { get; set; }

    private string Modelo = string.Empty;
    private string Data = string.Empty;
    private string Estado = string.Empty;
    private FaseDeMontagem FaseAtual = new();
    private int TotalFases = 15; // N√∫mero total de fases (pode ser obtido do backend)
    private int ProgressoPercentual = 0;
    private string FaseImagem = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            var facade = BMWFacade.GetInstance();
            var encomenda = facade.GetEncomendaById(Id);
            if (encomenda == null) throw new Exception("Encomenda n√£o encontrada.");

            Modelo = facade.GetVeiculoById(encomenda.IdVeiculo).Modelo;
            Data = encomenda.DataRegisto.ToString("dd-MM-yyyy");
            Estado = encomenda.Estado.ToString();

            var progresso = facade.GetProgresso(Id);
            if (progresso.Any())
            {
                var ultimaFase = progresso.OrderByDescending(p => p.IdFase).First();
                FaseAtual = facade.GetFaseDeMontagemById(ultimaFase.IdFase);
                ProgressoPercentual = (int)((double)FaseAtual.Ordem / TotalFases * 100);
            }
            else
            {
                FaseAtual = facade.GetFaseDeMontagemById(1);
                ProgressoPercentual = 0;
            }

            FaseImagem = $"images/fases/fase{FaseAtual.Ordem}.png";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar detalhes da encomenda: {ex.Message}");
        }
    }
}

<style>
    .encomenda-container {
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        color: #121212; /* Cor do texto */
    }

    .encomenda-detalhes {
        margin-bottom: 20px;
    }

    .encomenda-detalhes h3 {
        margin-bottom: 10px;
        color: #007bff; /* Azul para destaque no t√≠tulo */
    }

    .encomenda-detalhes p {
        margin: 5px 0;
        color: #333333; /* Cinza escuro para contraste */
    }

    .encomenda-progresso {
        margin: 20px 0;
    }

    .progress-bar {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px; /* Espa√ßo entre as bolas */
        flex-direction: row; /* Alinhamento horizontal */
    }

    .progress-step {
        width: 15px;
        height: 15px;
        margin-top: 15px;
        margin-bottom: 15px;
        border-radius: 50%;
        background-color: #cccccc; /* Cor das bolas n√£o conclu√≠das */
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

    .progress-step.completed {
        background-color: #007bff; /* Cor das bolas conclu√≠das */
    }

    .progress-step:hover {
        transform: scale(1.2); /* Leve aumento ao passar o mouse */
    }

    .fase-imagem img {
        max-width: 100%;
        max-height: 300px;
        border-radius: 10px;
        margin: 20px 0;
    }

    .fase-legenda {
        color: #333333;
        font-size: 14px;
        text-align: center;
    }

    .selected {
        background-color: #0047b3 !important;
        transform: scale(1.4);
    }
</style>

<script>
    function selectFase(faseIndex) {
        // Atualizar imagem e legenda
        const img = document.getElementById('faseImg');
        const legenda = document.getElementById('faseLegenda');

        img.src = `images/fases/fase${faseIndex}.png`;
        legenda.textContent = `Fase ${faseIndex} - ${getDescricaoFase(faseIndex)}`;

        // Resetar estilos anteriores
        document.querySelectorAll(".progress-step").forEach(step => {
            step.classList.remove("selected");
        });

        // Aplicar estilo √† fase selecionada
        const selected = document.getElementById(`fase-${faseIndex}`);
        if (selected) {
            selected.classList.add("selected");
        }
    }

    function getDescricaoFase(faseIndex) {
        const descricoes = [
            "Prepara√ß√£o do chassi",
            "Montagem do sistema de suspens√£o",
            "Instala√ß√£o do sistema de travagem",
            "Coloca√ß√£o do motor e transmiss√£o",
            "Montagem do sistema de escape",
            "Instala√ß√£o do sistema el√©trico",
            "Montagem da carro√ßaria",
            "Instala√ß√£o de vidros e portas",
            "Montagem do interior",
            "Instala√ß√£o do sistema de ar condicionado e aquecimento",
            "Pintura e acabamento externo",
            "Montagem das rodas e pneus",
            "Teste de alinhamento e calibragem",
            "Teste de qualidade e seguran√ßa",
            "Inspe√ß√£o final e entrega"
        ];
        return descricoes[faseIndex - 1] || "Fase desconhecida";
    }
</script>
