@page "/encomendas"
@using BMW.Data.Data

<PageTitle>Encomendas</PageTitle>

<TableLayout 
    UserName="Diogo Fernandes" 
    UserRole="Cliente"
    Button1Text="Encomendas"
    Button1Href="@Button1Href" 
    Button1Icon="ðŸ“¦"
    Button2Text="CatÃ¡logo"
    Button2Href="/catalogo"
    Button2Icon="ðŸ›’"
    Title="GestÃ£o de Encomendas">

    <table class="table">
        <thead>
            <tr>
                <th>CÃ³digo</th>
                <th>VeÃ­culo</th>
                <th>Data</th>
                <th>Estado</th>
                <th>Alertas</th>
                <th>AÃ§Ãµes</th>
            </tr>
        </thead>
        <tbody>
            @if (ListaEncomendas.Count > 0)
            {
                @foreach (var encomenda in ListaEncomendas)
                {
                    <tr>
                        <td>@encomenda.Id</td>
                        <td>@encomenda.Veiculo</td>
                        <td>@encomenda.Data.ToString("dd-MM-yyyy")</td>
                        <td>@encomenda.Estado</td>
                        <td>@(encomenda.TemAlerta ? "ðŸ””" : "")</td>
                        <td>
                            <NavLink href="@($"/encomendas/acompanhar/{encomenda.Id}")" class="btn">Acompanhar</NavLink>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" style="text-align:center;">NÃ£o hÃ¡ encomendas registadas.</td>
                </tr>
            }
        </tbody>
    </table>
</TableLayout>

@code {
    [Parameter]
    public int UserId { get; set; }

    private string Button1Href => $"/encomendas/{UserId}";

    private List<EncomendaViewModel> ListaEncomendas = new();

    protected override void OnInitialized()
    {
        try
        {
            // Carregar as encomendas com base no ID do utilizador
            var facade = BMWFacade.GetInstance();
            var encomendas = facade.GetListaEncomendas(UserId);

            // Transformar as encomendas em um formato para exibiÃ§Ã£o
            foreach (var encomenda in encomendas)
            {
                ListaEncomendas.Add(new EncomendaViewModel
                {
                    Id = encomenda.Id,
                    Veiculo = facade.GetCatalogo().FirstOrDefault(v => v.Id == encomenda.IdVeiculo)?.Modelo ?? "Desconhecido",
                    Data = encomenda.DataRegisto,
                    Estado = "Em ProduÃ§Ã£o", // Ajustar sabendo o estado real
                    TemAlerta = facade.GetAlertas().Any(a => a.IdProgresso == encomenda.Id)
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar encomendas: {ex.Message}");
        }
    }

    public class EncomendaViewModel
    {
        public int Id { get; set; }
        public string Veiculo { get; set; } = string.Empty;
        public DateTime Data { get; set; }
        public string Estado { get; set; } = string.Empty;
        public bool TemAlerta { get; set; }
    }
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table th, .table td {
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .table th {
        background-color: #f0f0f0;
        font-weight: bold;
    }

    .table tr:hover {
        background-color: #f9f9f9;
    }

    .btn {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #0056b3;
    }
</style>
